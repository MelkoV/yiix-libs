<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace yiix\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "user".
 *
 * @property integer $id
 * @property string $username
 * @property string $name
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property string $phone
 * @property string $mobile_phone
 * @property integer $gender
 * @property string $comment
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property \common\models\SiteContent[] $siteContents
 * @property \common\models\SiteContent[] $siteContents0
 * @property \common\models\SiteContent[] $siteContents1
 * @property \common\models\SiteContent[] $siteContents2
 * @property string $aliasModel
 */
abstract class User extends \melkov\db\ActiveRecord 
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'name', 'auth_key', 'password_hash', 'password_reset_token', 'email', 'phone', 'mobile_phone', 'comment'], 'trim', 'skipOnEmpty' => true],
            [['username', 'auth_key', 'password_hash', 'email'], 'required'],
            [['status', 'gender'], 'integer'],
            [['username', 'name', 'password_hash', 'password_reset_token', 'email', 'phone', 'mobile_phone', 'comment'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['password_reset_token'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('label', 'ID'),
            'username' => Yii::t('label', 'Username'),
            'name' => Yii::t('label', 'Name'),
            'auth_key' => Yii::t('label', 'Auth Key'),
            'password_hash' => Yii::t('label', 'Password Hash'),
            'password_reset_token' => Yii::t('label', 'Password Reset Token'),
            'email' => Yii::t('label', 'Email'),
            'status' => Yii::t('label', 'Status'),
            'created_at' => Yii::t('label', 'Created At'),
            'updated_at' => Yii::t('label', 'Updated At'),
            'phone' => Yii::t('label', 'Phone'),
            'mobile_phone' => Yii::t('label', 'Mobile Phone'),
            'gender' => Yii::t('label', 'Gender'),
            'comment' => Yii::t('label', 'Comment'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSiteContents()
    {
        return $this->hasMany(\common\models\SiteContent::className(), ['created_by' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSiteContents0()
    {
        return $this->hasMany(\common\models\SiteContent::className(), ['deleted_by' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSiteContents1()
    {
        return $this->hasMany(\common\models\SiteContent::className(), ['edited_by' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSiteContents2()
    {
        return $this->hasMany(\common\models\SiteContent::className(), ['published_by' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \common\models\query\UserQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\UserQuery(get_called_class());
    }


}
